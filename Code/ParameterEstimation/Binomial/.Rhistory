# R2jags Example;
# When you work through the code for the first time,
# execute each command one at a time to better understand
# what it does.
# clears workspace:
rm(list=ls())
# sets working directories:
setwd("C:/Users/mdlee/Dropbox/BB2/Code/ParameterEstimation/Binomial")
library(R2jags)
k <- 5
n <- 10
data <- list("k", "n") # to be passed on to JAGS
myinits <- list(
list(theta = 0.1), #chain 1 starting value
list(theta = 0.9)) #chain 2 starting value
# parameters to be monitored:
parameters <- c("theta")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file ="Rate_1.txt", n.chains=2, n.iter=20000,
n.burnin=1, n.thin=1, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# The commands below are useful for a quick overview:
print(samples)  # a rough summary
plot(samples)   # a visual representation
traceplot(samples) # traceplot (press <enter> repeatedly to see the chains)
summary(samples)
summary(samples$BUGSoutput)
chain <- 1
samples$BUGSoutput$sims.array[1:15,chain,]# array: element, chain, column (theta/deviance)
# Collect posterior samples across all chains:
theta <- samples$BUGSoutput$sims.list$theta
# Now let's plot a histogram for theta.
# First, some options to make the plot look better:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), ylim=c(0,10), xlab="Rate", ylab="Posterior Density")
# NB. ylim=c(0,10) defines the range of the y-axis. Adjust the upper value
# in case your posterior distribution falls partly outside this range.
x <- 5
x
x <- 5
Y <- 10
Y <- 10
x <- 5
Y <- 10
Y
numVec <- c(2, 3, 4, 5)
numVec
numVec <- c(2, 3, 4, 5)
numVec <- 30:300
numVec
x <- 5
Y <- 10
numVec <- c(2, 3, 5)
numVec2 <- 30:300
numVec
numVec2
charVec <- c("a", "b", "C")
charVec
logVec <- c(TRUE, FALSE, TRUE, FALSE)
logVec
logVec <- c(TRUE, FALSE, T, F)
logVec <- c(TRUE, FALSE, T, F)
logVec
logVec2 <- vector(mode = "logical", length = 10)
?vector
length(logVec)
numVec <- vector(mode = "numeric", length = 5)
intVec <- c(1L, 2L)
a <- Inf; b <- 0
rslt <- c(b/a, a/a)
comVec <- c(1+0i, 3+2i)
numCharVec <- c(3.14, "a")
numLogVec <- c(pi, T)
charLogVec <- c("a", TRUE)
numVec <- seq(from = 1200, to = 1300, by = 15)
as(numVec, "character")
myNewVec <- as(numVec, "character")
mode(myNewVec)
numVec <- 1:5
new <- as(numVec, "logical")
numVec <- 0:5
new <- as(numVec, "logical")
Gender <- rep(c("female", "male"), times = 3)
GenderFac1 <- factor(Gender)
GenderFac2 <- factor(Gender, levels = c("male", "female"))
unclass(GenderFac1)
myMat <- martrix(nrow = 2, ncol = 4)
myMat <- matrix(nrow = 2, ncol = 4)
myMat <- matrix(nrow = 2, ncol = 4)
myMat <- matrix(nrow = 2, ncol = 4)
myMat[1,1] <- 10
myMat
dim(myMat)
numVec <- c(3, 4, 5)
as.matrix(numVec)
myMat <- matrix(1:8, nrow = 2 ncol = 4, byrow = T)
myMat <- matrix(1:8, nrow = 2 ncol = 4, byrow = T)
myMat <- matrix(1:8, nrow = 2, ncol = 4, byrow = T)
myMat
myMat[1,1:3] <- c(1,2,3)
myMat
myMat[1,1:3] <- c(3,2,1)
myMat
vec1 <- 1:4
vec2 <- samples(1:100, 4, replace = F)
vec3 <- rnomr(4, mean = 0, sd = 1)
vec1 <- 1:4
vec2 <- sample(1:100, 4, replace = F)
vec3 <- rnomr(4, mean = 0, sd = 1)
vec1 <- 1:4
vec2 <- sample(1:100, 4, replace = F)
vec3 <- rnorm(4, mean = 0, sd = 1)
vec1
vec2
vec3
matrix1 <- cbind(vec1, vec2, vec3)
(matrix1)
matrix2 <- rbind(vec1, vec2, vec3)
(matrix2)
myVec <- c(10, "R", 10-51, T)
myVec
myList <- list(10, "R", 10-51, T)
myList
myList2 <- list(elem1 = 10, elem2 = c("R', "C++"), elem3 = c(T, F, F))
myList2 <- list(elem1 = 10, elem2 = c("R", "C++"), elem3 = c(T, F, F))
myList2
myList2 <- list(reading = 10, string = c("R", "C++"), test = c(T, F, F))
myList2
student <- paste("S#", sample(1:10, 4), sep = "-")
student
student2 <- paste(c("S#", "S2", "S3"), sample(1:10, 4), sep = "-")
student2
gender <- sample(c("female", "male"), 10, replace = T)
gender
student <- paste("S#", sample(1:10, 4), sep = "-")
student2 <- paste(c("S#", "S2", "S3"), sample(1:10, 4), sep = "-")
score <- sample(0:100, 10)
data <- dataframe(studentID = studentID, score = score, gender = gender)
student <- paste("S#", sample(1:10, 4), sep = "-")
student2 <- paste(c("S#", "S2", "S3"), sample(1:10, 4), sep = "-")
score <- sample(0:100, 10)
data <- data.frame(studentID = studentID, score = score, gender = gender)
data <- data.frame(studentID = student, score = score, gender = gender)
student <- paste("S#", sample(1:10, 10), sep = "-")
student2 <- paste(c("S#", "S2", "S3"), sample(1:10, 4), sep = "-")
score <- sample(0:100, 10)
data <- data.frame(studentID = student, score = score, gender = gender)
data
student <- paste("S#", sample(1:10, 10), sep = "")
student2 <- paste(c("S#", "S2", "S3"), sample(1:10, 4), sep = "-")
score <- sample(0:100, 10)
data <- data.frame(studentID = student, score = score, gender = gender)
gender <- sample(c("female", "male"), 10, replace = T)
data
nrow(data)
names(data)
View(data)
head(data)
data$gender
data$gender[3]
data$studentID
data$studentID[1,1
]
data$studentID
data$studentID[2]
data$studentID[2:4]
ind <- c(2, 5, 7)
data$gender(ind)
ind <- c(2, 5, 7)
data$gender[ind]
data$studentID
data
notind <- c(2, 5, 7)
data$gender[notind]
notind <- c(-2, -5, -7)
data$gender[notind]
library(datasets)
data(quakes)
str(quakes)
head(quakes$long)
library(datasets)
data(quakes)
str(quakes)
head(quakes$long)
?quakes
head(quakes[,c("stations","mag")])
match <- quakes$mag > 5
match
quakes[match]
quakes[match,]
head(quakes[(quakes$msg > 5) & (quakes$mag < 6), ])
head(quakes[(quakes$mag > 5) & (quakes$mag < 6), ])
source(firstSession)
source(firstSession.R)
?source
source('firstSession.R')
source("C:/users/mdlee/Dropbox/RCourse/MDL/firstSession.R")
source("C:/Users/mdlee/Dropbox/RCourse/MDL/firstSession.R")
source("C:/Users/mdlee/Dropbox/RCourse/MDL/firstSession.R")
iris <- read.csv(file = file.choose("C:\Users\mdlee\Dropbox\RCourse\IntroR_Workshop-gh-pages"))
iris <- read.csv(file = file.choose("C:/Users/mdlee/Dropbox/RCourse/IntroR_Workshop-gh-pages"))
iris <- read.csv(file = "C:/Users/mdlee/Dropbox/RCourse/IntroR_Workshop-gh-pages/iris.csv")
iris
head(iris)
}
for(i in 1:4){
print(paste("cycle #", i, sep = ""))
i <- i + 1
}
for(i in 1:4){
print(paste("cycle #", i, sep = ""))
#i <- i + 1
}
myMin(10,2)
myMin <- function(a, b){
myMinVal <- min(a, b)
return(myMinVal)
}
myMin(10,2)
myMin <- function(a, b){
myMinVal <- min(a, b)
return(myMinVal)
}
myMin(10,2)
myMin(10,2)
myMin <- function(a, b){
myMinVal <- min(a, b)
return(myMinVal)
}
myMin(10,2)
install.packages("ggplot2")
?ggplot
?ggplot2
str(myMin)
?lapply
?mapply
dbinom(5, 10, 0.5)
rbinom(5, 10, 0.5)
rbinom(5, 10, 0.5)
rbinom(10, 0.5)
rbinom(0.5, 10)
?rbinom
rbinom(10, 1, 0.5)
rbinom(10, 10, 0.5)
qbinom(10, 10, 0.5)
qbinom(95, 10, 0.5)
qbinom(.95, 10, 0.5)
qbinom(c(.05,.95), 10, 0.5)
qbinom(c(.025,.975), 10, 0.5)
qbinom(c(.025,.975), 100, 0.5)
qbinom(c(.025,.975), 100, 0.75)
x <- seq(from = -3, to = 3, by = 0.05)
y <- dnorm(x, mean = 0, sd = 1)
plot(x, y, type = "l")
head(diamonds)
data(diamonds)
library(datasets)
data(diamonds)
data(diamonds)
head(diamonds)
library(ggplot2)
head(diamonds)
library(ggplot2)
head(diamonds)
ggplot(diamonds, aes(price)) + geom_histogram()
ggplot(diamonds, aes(price))
ggplot(diamonds, price)
library(ggplot2)
head(diamonds)
ggplot(diamonds, aes(clarity)) + geom_histogram()
library(ggplot2)
head(diamonds)
ggplot(diamonds, aes(depth)) + geom_histogram()
library(ggplot2)
head(diamonds)
ggplot(diamonds, aes(depth^2)) + geom_histogram()
library(ggplot2)
head(diamonds)
# gplot(diamonds, aes(depth)) + geom_histogram()
m <- ggplot(diamonds, aes(price))
m + geom_histogram(aes(fill=cut))
ggplot(diamonds, aes(price, carat)) + geom_point()
library(car)
library("car")
install.packages("car")
library("car")
head(prestige)
head(Prestige)
myReg <- lm(prestige ~ education + income + women, data = Prestige)
myReg # summary(myReg)
myReg <- lm(prestige ~ education + income + women +education*women, data = Prestige)
myReg # summary(myReg)
summary(myReg)
names(myReg)
myReg <- lm(prestige ~ education + income + women +education*women, data = Prestige)
myReg # summary(myReg)
names(myReg)
myReg$coefficients
library(xtable)
library("xtable")
intall.package("xtable")
install.package("xtable")
install.packages("xtable")
library(xtable)
library(xtable)
xtable(myReg$coefficients)
?xtable
myReg <- lm(prestige ~ education + income + women +education*women, data = Prestige)
myReg # summary(myReg)
names(myReg)
myReg$coefficients
library(xtable)
xtable(myReg$coefficients)
library(xtable)
xtable(myReg)
plot(myReg)
for(i in 1:4){
print(paste("cycle #", i, sep = ""))
#i <- i + 1
}
for(i in 1:4){
print(paste("cycle #", i, sep = ""))
i <- i + 1
}
# R2jags Example;
# When you work through the code for the first time,
# execute each command one at a time to better understand
# what it does.
# clears workspace:
rm(list=ls())
# sets working directories:
setwd("C:/Users/mdlee/Dropbox/BB2/Code/ParameterEstimation/Binomial")
library(R2jags)
k <- 5
n <- 10
data <- list("k", "n") # to be passed on to JAGS
myinits <- list(
list(theta = 0.1), #chain 1 starting value
list(theta = 0.9)) #chain 2 starting value
# parameters to be monitored:
parameters <- c("theta")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file ="Rate_1.txt", n.chains=2, n.iter=20000,
n.burnin=1, n.thin=1, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# The commands below are useful for a quick overview:
print(samples)  # a rough summary
plot(samples)   # a visual representation
traceplot(samples) # traceplot (press <enter> repeatedly to see the chains)
summary(samples)
summary(samples$BUGSoutput)
chain <- 1
samples$BUGSoutput$sims.array[1:15,chain,]# array: element, chain, column (theta/deviance)
# Collect posterior samples across all chains:
theta <- samples$BUGSoutput$sims.list$theta
# Now let's plot a histogram for theta.
# First, some options to make the plot look better:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), ylim=c(0,10), xlab="Rate", ylab="Posterior Density")
# NB. ylim=c(0,10) defines the range of the y-axis. Adjust the upper value
# in case your posterior distribution falls partly outside this range.
diamonds
gplot(diamonds, aes(price)) + geom_histogram()
ggplot(diamonds, aes(price)) + geom_histogram()
